-----------------------------------------------------------------PASSAGER------------------------------------------------------------------------------------------------

public class Passager {
    //constante à la classe
    public static final int AGE_PAR_DEFAUT = 50;
    public static final int POIDS_PAR_DEFAUT = 300;
    public static final int AGE_MIN = 0;
    public static final int POIDS_MIN = 0;

    //variable d'instance (synonime est attribut)
    private int age;
    private int poids;

    //constructeur par défaut
    public Passager() {
        this.age = AGE_PAR_DEFAUT;
        this.poids = POIDS_PAR_DEFAUT;
    }

    public Passager(int age, int poids) {
        setAge(age);
        setPoids(poids);
    }

    public int getAge() {
        return age;
    }

    public void setAge(int age) {
        if (!ageEstValide(age))
            throw new IllegalArgumentException("Age invalide : " + age);
        this.age = age;
    }

    public static boolean ageEstValide(int age) {
        boolean estValide;
        estValide = age > AGE_MIN;
        return estValide;
    }

    public int getPoids() {
        return poids;
    }

    public void setPoids(int poids) {
        if (!poidsEstValide(poids))
            throw new IllegalArgumentException("Poids invalide : " + poids);
        this.poids = poids;
    }

    @Override
    public String toString() {
        return "Passager{" +
                "age=" + age +
                ", poids=" + poids +
                '}';
    }

    public static boolean poidsEstValide(int poids) {
        boolean estValide;
        estValide = poids > POIDS_MIN;
        return estValide;
    }
}



-----------------------------------------------------------------PASSAGER TEST------------------------------------------------------------------------------------------------

public class PassagerTest {
    public PassagerTest() {
        saisirEtAfficherUnPassager();
    }

    private void saisirEtAfficherUnPassager() {
        Passager p;
        int age;
        int poids;
        boolean poidEtAgeEstValide;
        //saisir age et poids

        do {
            age = Util.lireInt("Quel est l'âge du passager ? ");
            poids = Util.lireInt("Quel est le poids du passager (en livre) ? ");

            poidEtAgeEstValide = Passager.ageEstValide(age) && Passager.poidsEstValide(poids);

            if (!poidEtAgeEstValide)
                System.out.println("Le poids et l'age doit être positif!");
        }
        while (!poidEtAgeEstValide);
        p = new Passager(age, poids);

        System.out.println(p);
    }

    private void testerPassager() {
        Passager p;

        p = new Passager(); //appel le constructeur par défaut
        System.out.println(p);

        p = new Passager(-1, 0);
        System.out.println(p);
    }

    public static void main(String[] args) {
        new PassagerTest();
    }
}




----------------------------------------------------------------- Util ------------------------------------------------------------------------------------------------



import java.util.Scanner;

public class Util {
    public static String lireString(String question) {
        Scanner sc;
        String reponse;

        sc = new Scanner(System.in);

        System.out.print(question);
        reponse = sc.nextLine();

        return reponse;
    }

    public static int lireInt(String question) {
        String reponse;
        int reponseInt;

        reponse = lireString(question);
        reponseInt = Integer.parseInt(reponse);

        return reponseInt;
    }
}




----------------------------------------------------------------- Utility ------------------------------------------------------------------------------------------------





import java.util.Random;
import java.util.Scanner;

public class Utility {

    public static int getNombreAleatoireEntreBorne(int min, int max) {
        if (min >= max) {
            throw new IllegalArgumentException("max doit être plus grand que min");
        }

        Random r = new Random(); //Instaciation de la classe Random
        return r.nextInt((max - min) + 1) + min;
    }

    public static String lireString(String question) {
        Scanner sc;
        String reponse;

        sc = new Scanner(System.in);

        System.out.print(question);
        reponse = sc.nextLine();

        return reponse;
    }


    public static int lireInt(String question) {
        String reponse;
        int reponseInt;

        reponse = lireString(question);
        reponseInt = Integer.parseInt(reponse);

        return reponseInt;
    }
}
